name: Security Scan
on:
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'requirements_clean.txt'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit pip-audit
          
      - name: Run Safety check
        run: |
          echo "🔒 Running Safety vulnerability scan..."
          safety check --json --output safety-report.json
          
      - name: Run Bandit security scan
        run: |
          echo "🔒 Running Bandit security scan..."
          bandit -r . -f json -o bandit-report.json
          
      - name: Run pip-audit
        run: |
          echo "🔒 Running pip-audit..."
          pip-audit --format json --output pip-audit-report.json
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            pip-audit-report.json
          retention-days: 30
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔒 Security Scan Results\n\n';
            
            try {
              const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              if (safetyReport.length > 0) {
                comment += '### ⚠️ Safety Vulnerabilities Found\n';
                safetyReport.forEach(vuln => {
                  comment += `- **${vuln.package}**: ${vuln.vulnerability_id} - ${vuln.advisory}\n`;
                });
              } else {
                comment += '✅ No Safety vulnerabilities found\n';
              }
            } catch (e) {
              comment += '❌ Could not parse Safety report\n';
            }
            
            comment += '\n';
            
            try {
              const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              if (banditReport.results.length > 0) {
                comment += '### ⚠️ Bandit Security Issues Found\n';
                banditReport.results.forEach(issue => {
                  comment += `- **${issue.filename}:${issue.line_number}**: ${issue.issue_text}\n`;
                });
              } else {
                comment += '✅ No Bandit security issues found\n';
              }
            } catch (e) {
              comment += '❌ Could not parse Bandit report\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
          
      - name: Check for outdated dependencies
        run: |
          echo "📦 Checking for outdated dependencies..."
          pip list --outdated --format=json > outdated-packages.json
          
      - name: Create dependency update issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const outdated = JSON.parse(fs.readFileSync('outdated-packages.json', 'utf8'));
              
              if (outdated.length > 0) {
                let body = '## 📦 Outdated Dependencies\n\n';
                body += 'The following packages have newer versions available:\n\n';
                
                outdated.forEach(pkg => {
                  body += `- **${pkg.name}**: ${pkg.version} → ${pkg.latest_version}\n`;
                });
                
                body += '\n### Action Required\n';
                body += 'Consider updating these dependencies to their latest versions for security and performance improvements.\n';
                
                // Check if issue already exists
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: ['dependencies']
                });
                
                const existingIssue = issues.data.find(issue => 
                  issue.title.includes('Dependency Update') && 
                  issue.body.includes('Outdated Dependencies')
                );
                
                if (!existingIssue) {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: '🔄 Dependency Update Required',
                    body: body,
                    labels: ['dependencies', 'maintenance']
                  });
                }
              }
            } catch (e) {
              console.log('No outdated packages found or error occurred');
            } 